name: Full Pipeline E2E (Roof -> Panel, Real Weights)

on:
  workflow_dispatch:
    inputs:
      gdrive_url:
        description: 'Google Drive folder/file URL for YOLO weights (.pt)'
        required: false
        default: 'https://drive.google.com/drive/folders/1PAZhk_L8AdMqOqG7NZRgWWbLNJ-wgrzd?usp=drive_link'
      gdrive_file_id:
        description: 'Optional: Direct Google Drive file ID for .pt (use when folder listing fails)'
        required: false
        default: ''

jobs:
  e2e:
    runs-on: ubuntu-latest
    timeout-minutes: 40
    env:
      DEFAULT_GDRIVE_URL: 'https://drive.google.com/drive/folders/1PAZhk_L8AdMqOqG7NZRgWWbLNJ-wgrzd?usp=drive_link'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install deps (roof + panel minimal + gdown)
        run: |
          python -m pip install --upgrade pip
          pip install -r roof/requirements.txt
          # minimal deps for panel API
          pip install flask==2.3.2 "werkzeug<3.0.0" requests==2.31.0 \
                      numpy==1.24.3 scipy==1.11.1 \
                      opencv-python-headless==4.8.1.78 pillow==10.0.0
          pip install gdown==5.2.0

      - name: Download weights from Google Drive
        env:
          INPUT_URL: ${{ github.event.inputs.gdrive_url }}
          INPUT_ID: ${{ github.event.inputs.gdrive_file_id }}
        run: |
          set -euo pipefail
          URL="${INPUT_URL:-$DEFAULT_GDRIVE_URL}"
          ID="${INPUT_ID:-}"
          echo "Using URL: $URL"
          if [ -n "$ID" ]; then
            echo "Using direct file id: $ID"
          fi
          mkdir -p weights_dl
          if [ -n "$ID" ]; then
            gdown --id "$ID" -O weights_dl/model.pt
          else
            # Try as folder first, then as fuzzy file URL
            gdown --fuzzy "$URL" -O weights_dl --folder || gdown --fuzzy "$URL" -O weights_dl
          fi
          echo "Downloaded files:"; ls -lR weights_dl || true
          MODEL_PATH=$( (ls -1 weights_dl/**/best.pt 2>/dev/null || true; ls -1 weights_dl/*.pt 2>/dev/null || true; find weights_dl -type f -name '*.pt' -print 2>/dev/null || true) | head -n1 )
          if [ -z "$MODEL_PATH" ]; then
            echo "No .pt weights found. If using a folder URL, ensure sharing is 'Anyone with the link'."
            echo "Alternatively, re-run with the file ID input (from a link like https://drive.google.com/file/d/<FILE_ID>/view)."
            exit 1
          fi
          echo "Found model: $MODEL_PATH"
          echo "ROOF_MODEL_PATH=$(pwd)/$MODEL_PATH" >> $GITHUB_ENV

      - name: Run full pipeline (Roof /segment_masks -> Panel /calculate_panels)
        env:
          ROOF_MODEL_PATH: ${{ env.ROOF_MODEL_PATH }}
        run: |
          python - <<'PY'
          import os, json, base64
          from pathlib import Path
          from fastapi.testclient import TestClient as FastClient
          from roof.app.main import app as roof_app
          from panel_count.api_integration import app as panel_app

          # Ensure real model will be used (CI is set by GitHub, but we set model path so segmentation won't mock)
          mp = os.environ.get('ROOF_MODEL_PATH')
          assert mp and Path(mp).exists(), f"ROOF_MODEL_PATH missing or not found: {mp}"

          # Prepare an input image: use repo sample if exists, else generate a simple synthetic roof-like image
          img_path = Path('panel_count/sample_roof.png')
          if not img_path.exists():
              import cv2, numpy as np
              img_path = Path('tmp_input.png')
              h, w = 600, 800
              img = np.zeros((h, w, 3), np.uint8)
              # draw a trapezoid to mimic a roof
              pts = np.array([[120, 350],[680, 350],[560, 180],[240, 180]], dtype=np.int32)
              cv2.fillPoly(img, [pts], (200,200,200))
              cv2.imwrite(str(img_path), img)

          # 1) Call Roof API
          roof_client = FastClient(roof_app)
          with open(img_path, 'rb') as f:
              files = { 'image': (img_path.name, f, 'image/png') }
              r = roof_client.post('/segment_masks', files=files, timeout=180)
          print('Roof status:', r.status_code)
          assert r.status_code == 200, r.text
          seg = r.json()
          masks = seg.get('masks', [])
          centers = seg.get('centers', [])
          print('Roof masks:', len(masks), 'centers:', len(centers))

          # 2) Call Panel API with batch masks (works with 0+ masks; we just verify route and 200)
          panel_client = panel_app.test_client()
          payload = {
            'roof_masks': masks,
            'gsd': 0.05,
            'offset_m': 0.3,
            'panel_options': {'Standard_B': [1.65, 1.0]}
          }
          r2 = panel_client.post('/calculate_panels', json=payload)
          print('Panel status:', r2.status_code)
          assert r2.status_code == 200, r2.data

          # basic schema checks
          data = r2.get_json() if hasattr(r2, 'get_json') else json.loads(r2.data)
          assert isinstance(data, dict), 'panel response not dict'
          assert 'success' in data or 'roofs' in data, 'unexpected panel response'
          print('Pipeline OK')
          PY

